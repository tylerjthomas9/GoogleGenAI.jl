var documenterSearchIndex = {"docs":
[{"location":"api/","page":"API","title":"API","text":"CurrentModule = GoogleGenAI","category":"page"},{"location":"api/","page":"API","title":"API","text":"","category":"page"},{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"GoogleProvider\nGenerateContentConfig\ngenerate_content\ncount_tokens\nembed_content\nlist_models\ncreate_cached_content\nlist_cached_content\nget_cached_content\nupdate_cached_content\ndelete_cached_content\nupload_file\nget_file\nlist_files\ndelete_file","category":"page"},{"location":"api/#GoogleGenAI.GoogleProvider","page":"API","title":"GoogleGenAI.GoogleProvider","text":"Base.@kwdef struct GoogleProvider <: AbstractGoogleProvider\n    api_key::String = \"\"\n    base_url::String = \"https://generativelanguage.googleapis.com\"\n    api_version::String = \"v1beta\"\nend\n\nA configuration object used to set up and authenticate requests to the Google Generative Language API.\n\n# Fields\n- `api_key::String`: Your Google API key. \n- `base_url::String`: The base URL for the Google Generative Language API. The default is set to `\"https://generativelanguage.googleapis.com\"`.\n- `api_version::String`: The version of the API you wish to access. The default is set to `\"v1beta\"`.\n\n\n\n\n\n","category":"type"},{"location":"api/#GoogleGenAI.GenerateContentConfig","page":"API","title":"GoogleGenAI.GenerateContentConfig","text":"GenerateContentConfig\n\nOptional model configuration parameters.\n\nFields\n\nhttp_options=(;): Used to override HTTP request options.\nAll keyword arguments supported by the HTTP.request function. Documentation can be found here: https://juliaweb.github.io/HTTP.jl/stable/reference/#HTTP.request.\nsystem_instruction::Union{Nothing,String,Vector{Dict{Symbol,Any}}}: Instructions for the model.\ntemperature::Union{Nothing,Float64}: Controls the degree of randomness in token selection.\ntop_p::Union{Nothing,Float64}: Selects tokens from most to least probable until the sum of their probabilities equals this value.\ntop_k::Union{Nothing,Float64}: Samples the top_k tokens with the highest probabilities at each step.\ncandidate_count::Union{Nothing,Int}: Number of response variations to return.\nmax_output_tokens::Union{Nothing,Int}: Maximum number of tokens that can be generated.\nstop_sequences::Union{Nothing,Vector{String}}: List of strings that tell the model to stop generating text.\nresponse_logprobs::Union{Nothing,Bool}: Whether to return the log probabilities of chosen tokens.\nlogprobs::Union{Nothing,Int}: Number of top candidate tokens to return log probabilities for.\npresence_penalty::Union{Nothing,Float64}: Penalizes tokens that already appear, increasing diversity.\nfrequency_penalty::Union{Nothing,Float64}: Penalizes tokens that appear repeatedly, increasing diversity.\nseed::Union{Nothing,Int}: Fixed seed for reproducibility; otherwise, a random number is used.\nresponse_mime_type::Union{Nothing,String}: Output response media type.\nresponse_schema::Union{Nothing,Dict{Symbol,Any}}: Schema that the generated candidate text must adhere to.\nrouting_config::Union{Nothing,Dict{Symbol,Any}}: Configuration for model router requests.\nsafety_settings::Union{Nothing,Vector{Dict{Symbol,Any}}}: Safety settings to block unsafe content.\ntools::Union{Nothing,Vector{Dict{Symbol,Any}}}: Enables interaction with external systems.\ntool_config::Union{Nothing,Dict{Symbol,Any}}: Associates model output to a specific function call.\nlabels::Union{Nothing,Dict{String,String}}: User-defined metadata labels.\ncached_content::Union{Nothing,String}: Resource name of a context cache.\nresponse_modalities::Union{Nothing,Vector{String}}: Requested modalities of the response.\nmedia_resolution::Union{Nothing,String}: Specified media resolution.\nspeech_config::Union{Nothing,Dict{Symbol,Any}}: Speech generation configuration.\naudio_timestamp::Union{Nothing,Bool}: Whether to include audio timestamp in the request.\nautomatic_function_calling::Union{Nothing,Dict{Symbol,Any}}: Configuration for automatic function calling.\nthinking_config::Union{Nothing,Dict{Symbol,Any}}: Thinking features configuration.\n\n\n\n\n\n","category":"type"},{"location":"api/#GoogleGenAI.generate_content","page":"API","title":"GoogleGenAI.generate_content","text":"generate_content(provider::AbstractGoogleProvider, model_name::String, prompt::String; image_path::String, config=GenerateContentConfig()) -> NamedTuple\ngenerate_content(api_key::String, model_name::String, prompt::String; image_path::String, config=GenerateContentConfig()) -> NamedTuple\n\ngenerate_content(provider::AbstractGoogleProvider, model_name::String, conversation::Vector{Dict{Symbol,Any}}; image_path::String, config=GenerateContentConfig()) -> NamedTuple\ngenerate_content(api_key::String, model_name::String, conversation::Vector{Dict{Symbol,Any}}; image_path::String, config=GenerateContentConfig()) -> NamedTuple\n\nGenerate content based on a combination of text prompt and an image (optional).\n\nArguments\n\nprovider::AbstractGoogleProvider: The provider instance for API requests.\napi_key::String: Your Google API key as a string. \nmodel_name::String: The model to use for content generation.\nprompt::String: The text prompt to accompany the image.\n\nKeyword Arguments\n\nimage_path::String (optional): The path to the image file to include in the request.\nconfig::GenerateContentConfig (optional): Configuration for the generation request.\n\nReturns\n\nNamedTuple: A named tuple containing the following keys:\ncandidates: A vector of dictionaries, each representing a generation candidate.\nsafety_ratings: A dictionary containing safety ratings for the prompt feedback.\ntext: A string representing the concatenated text from all candidates.\nresponse_status: An integer representing the HTTP response status code.\nfinish_reason: A string indicating the reason why the generation process was finished.\n\n\n\n\n\n","category":"function"},{"location":"api/#GoogleGenAI.count_tokens","page":"API","title":"GoogleGenAI.count_tokens","text":"count_tokens(provider::AbstractGoogleProvider, model_name::String, prompt::String) -> Int\ncount_tokens(api_key::String, model_name::String, prompt::String) -> Int\n\nCalculate the number of tokens generated by the specified model for a given prompt string.\n\nArguments\n\nprovider::AbstractGoogleProvider: The provider instance containing API key and base URL information.\napi_key::String: Your Google API key as a string. \nmodel_name::String: The name of the model to use for generating content. \nprompt::String: The prompt prompt based on which the text is generated.\n\nReturns\n\nInt: The total number of tokens that the given prompt string would be broken into by the specified model's tokenizer.\n\n\n\n\n\n","category":"function"},{"location":"api/#GoogleGenAI.embed_content","page":"API","title":"GoogleGenAI.embed_content","text":"embed_content(provider::AbstractGoogleProvider, model_name::String, prompt::String; http_kwargs=NamedTuple()) -> NamedTuple\nembed_content(api_key::String, model_name::String, prompt::String; http_kwargs=NamedTuple()) -> NamedTuple\nembed_content(provider::AbstractGoogleProvider, model_name::String, prompts::Vector{String}; http_kwargs=NamedTuple()) -> NamedTuple\nembed_content(api_key::String, model_name::String, prompts::Vector{String}; http_kwargs=NamedTuple()) -> NamedTuple\n\nGenerate an embedding for the given prompt text using the specified model.\n\nArguments\n\nprovider::AbstractGoogleProvider: The provider instance containing API key and base URL information.\napi_key::String: Your Google API key as a string. \nmodel_name::String: The name of the model to use for generating content. \nprompt::String: The prompt prompt based on which the text is generated.\n\nHTTP Kwargs\n\nAll keyword arguments supported by the HTTP.request function. Documentation can be found here: https://juliaweb.github.io/HTTP.jl/stable/reference/#HTTP.request.\n\nReturns\n\nNamedTuple: A named tuple containing the following keys:\nvalues: A vector of Float64 representing the embedding values for the given prompt (or prompts).\nresponse_status: An integer representing the HTTP response status code.\n\n\n\n\n\nembed_content(provider::AbstractGoogleProvider, model_name::String, prompts::Vector{String}; ...) -> NamedTuple\n\nBatch embedding for multiple prompts.\n\n\n\n\n\n","category":"function"},{"location":"api/#GoogleGenAI.list_models","page":"API","title":"GoogleGenAI.list_models","text":"list_models(provider::AbstractGoogleProvider) -> Vector{Dict}\nlist_models(api_key::String) -> Vector{Dict}\n\nRetrieve a list of available models along with their details from the Google AI API.\n\nArguments\n\nprovider::AbstractGoogleProvider: The provider instance containing API key and base URL information.\napi_key::String: Your Google API key as a string. \n\nReturns\n\nVector{Dict}: A list of dictionaries, each containing details about an available model.\n\n\n\n\n\n","category":"function"},{"location":"api/#GoogleGenAI.create_cached_content","page":"API","title":"GoogleGenAI.create_cached_content","text":"create_cached_content(\n    provider::AbstractGoogleProvider,\n    model_name::String,\n    content::Union{String,Vector{Dict{Symbol,Any}},Dict{String,Any}};\n    ttl::String=\"300s\",\n    system_instruction::String=\"\",\n    http_kwargs=NamedTuple()\n) -> JSON3.Object\ncreate_cached_content(\n    api_key::String,\n    model_name::String,\n    content::Union{String,Vector{Dict{Symbol,Any}},Dict{String,Any}};\n    ttl::String=\"300s\",\n    system_instruction::String=\"\",\n    http_kwargs=NamedTuple()\n) -> JSON3.Object\n\nCreate a cached content resource that can be reused in subsequent requests.\n\nArguments\n\nprovider::AbstractGoogleProvider or api_key::String: The provider instance for API requests or your Google API key as a string.\nmodel_name::String: The model to use (e.g. \"gemini-1.5-flash-001\").\ncontent::Union{String,Vector{Dict{Symbol,Any}},Dict{String,Any}}: The content to cache, which can be a single string, an array of conversation messages, or a raw content dictionary.\nttl::String: Time-to-live duration for the cache. Defaults to \"300s\".\nsystem_instruction::String: An optional system instruction for the model.\n\nHTTP Kwargs\n\nAll keyword arguments supported by the HTTP.request function. Documentation can be found here: https://juliaweb.github.io/HTTP.jl/stable/reference/#HTTP.request.\n\nReturns\n\nJSON3.Object: A JSON object containing the metadata of the created cached content resource, including its cache name.\n\n\n\n\n\n","category":"function"},{"location":"api/#GoogleGenAI.list_cached_content","page":"API","title":"GoogleGenAI.list_cached_content","text":"list_cached_content(provider::AbstractGoogleProvider; http_kwargs=NamedTuple()) -> JSON3.Array\nlist_cached_content(api_key::String; http_kwargs=NamedTuple()) -> JSON3.Array\n\nLists the cache metadata for all your cached content. (Does not return the cached content itself.)\n\nArguments\n\nprovider::AbstractGoogleProvider or api_key::String: The provider instance for API requests or your Google API key as a string.\n\nHTTP Kwargs\n\nAll keyword arguments supported by the HTTP.request function. Documentation can be found here: https://juliaweb.github.io/HTTP.jl/stable/reference/#HTTP.request.\n\nReturns\n\nJSON3.Array: A JSON array of objects, where each object represents a cached content resource's metadata.\n\n\n\n\n\n","category":"function"},{"location":"api/#GoogleGenAI.get_cached_content","page":"API","title":"GoogleGenAI.get_cached_content","text":"get_cached_content(provider::AbstractGoogleProvider, cache_name::String; http_kwargs=NamedTuple()) -> JSON3.Object\nget_cached_content(api_key::String, cache_name::String; http_kwargs=NamedTuple()) -> JSON3.Object\n\nRetrieve the metadata for a single cached content resource by its resource name.\n\nArguments\n\nprovider::AbstractGoogleProvider or api_key::String: The provider instance for API requests or your Google API key as a string.\ncache_name::String: The full resource name of the cached content (e.g. \"cachedContents/12345\").\n\nHTTP Kwargs\n\nAll keyword arguments supported by the HTTP.request function. Documentation can be found here: https://juliaweb.github.io/HTTP.jl/stable/reference/#HTTP.request.\n\nReturns\n\nJSON3.Object: A JSON object containing the metadata for the specified cached content.\n\n\n\n\n\n","category":"function"},{"location":"api/#GoogleGenAI.update_cached_content","page":"API","title":"GoogleGenAI.update_cached_content","text":"update_cached_content(provider::AbstractGoogleProvider, cache_name::String, ttl::String; http_kwargs=NamedTuple()) -> JSON3.Object\nupdate_cached_content(api_key::String, cache_name::String, ttl::String, http_kwargs=NamedTuple()) -> JSON3.Object\n\nUpdate the TTL of an existing cached content resource. Attempts to change other fields are not supported.\n\nArguments\n\nprovider::AbstractGoogleProvider or api_key::String: The provider instance for API requests or your Google API key as a string.\ncache_name::String: The full resource name of the cached content (e.g. \"cachedContents/xyz123\").\nttl::String: The new time-to-live value. Defaults to \"600s\".\n\nHTTP Kwargs\n\nAll keyword arguments supported by the HTTP.request function. Documentation can be found here: https://juliaweb.github.io/HTTP.jl/stable/reference/#HTTP.request.\n\nReturns\n\nJSON3.Object: A JSON object containing the updated metadata for the cached content.\n\n\n\n\n\n","category":"function"},{"location":"api/#GoogleGenAI.delete_cached_content","page":"API","title":"GoogleGenAI.delete_cached_content","text":"delete_cached_content(provider::AbstractGoogleProvider, cache_name::String; http_kwargs=NamedTuple()) -> Int\ndelete_cached_content(api_key::String, cache_name::String; http_kwargs=NamedTuple()) -> Int\n\nDelete a cached content resource by its resource name.\n\nArguments\n\nprovider::AbstractGoogleProvider or api_key::String: The provider instance for API requests or your Google API key as a string.\ncache_name::String: The full resource name of the cached content (e.g. \"cachedContents/xyz123\").\n\nHTTP Kwargs\n\nAll keyword arguments supported by the HTTP.request function. Documentation can be found here: https://juliaweb.github.io/HTTP.jl/stable/reference/#HTTP.request.\n\nReturns\n\nInt: The HTTP status code of the deletion request.\n\n\n\n\n\n","category":"function"},{"location":"api/#GoogleGenAI.upload_file","page":"API","title":"GoogleGenAI.upload_file","text":"upload_file(provider::AbstractGoogleProvider, file_path::String; display_name::String=\"\", mime_type::String=\"application/octet-stream\", http_kwargs=NamedTuple()) -> JSON3.Object\n\nUploads a file using the media.upload endpoint. The file at file_path is read, base64-encoded, and sent along with optional metadata.\n\n\n\n\n\n","category":"function"},{"location":"api/#GoogleGenAI.get_file","page":"API","title":"GoogleGenAI.get_file","text":"get_file(provider::AbstractGoogleProvider, file_name::String; http_kwargs=NamedTuple()) -> Any\n\nRetrieves metadata for the file specified by its resource name (e.g. \"files/abc-123\").\n\n\n\n\n\n","category":"function"},{"location":"api/#GoogleGenAI.list_files","page":"API","title":"GoogleGenAI.list_files","text":"list_files(provider::AbstractGoogleProvider; page_size::Int=10, page_token::String=\"\", http_kwargs=NamedTuple()) -> JSON3.Array\n\nLists file metadata for files owned by your project. Use page_size and page_token for pagination.\n\n\n\n\n\n","category":"function"},{"location":"api/#GoogleGenAI.delete_file","page":"API","title":"GoogleGenAI.delete_file","text":"delete_file(provider::AbstractGoogleProvider, file_name::String; http_kwargs=NamedTuple()) -> Int\n\nDeletes the file specified by its resource name (e.g. \"files/abc-123\") and returns the HTTP status code.\n\n\n\n\n\n","category":"function"},{"location":"#GoogleGenAI.jl-Docs","page":"Home","title":"GoogleGenAI.jl Docs","text":"","category":"section"},{"location":"#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A Julia wrapper to the Google generative AI API. For API functionality, see reference documentation.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"From source:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using Pkg; Pkg.add(url=\"https://github.com/tylerjthomas9/GoogleGenAI.jl/\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> ]  # enters the pkg interface\nPkg> add https://github.com/tylerjthomas9/GoogleGenAI.jl/","category":"page"},{"location":"#Quick-Start","page":"Home","title":"Quick Start","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Create a secret API key in Google AI Studio.\nSet the GOOGLE_API_KEY environment variable.","category":"page"},{"location":"#Generate-Content","page":"Home","title":"Generate Content","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using GoogleGenAI\n\nsecret_key = ENV[\"GOOGLE_API_KEY\"]\nmodel = \"gemini-1.5-flash-latest\"\nprompt = \"Hello\"\nresponse = generate_content(secret_key, model, prompt)\nprintln(response.text)","category":"page"},{"location":"","page":"Home","title":"Home","text":"outputs","category":"page"},{"location":"","page":"Home","title":"Home","text":"\"Hello! 👋  How can I help you today? 😊\"","category":"page"},{"location":"","page":"Home","title":"Home","text":"api_kwargs = (max_output_tokens=50,)\nresponse = generate_content(secret_key, model, prompt; api_kwargs)\nprintln(response.text)","category":"page"},{"location":"","page":"Home","title":"Home","text":"outputs","category":"page"},{"location":"","page":"Home","title":"Home","text":"\"Hello! 👋  How can I help you today? 😊\"","category":"page"},{"location":"","page":"Home","title":"Home","text":"using GoogleGenAI\n\nsecret_key = ENV[\"GOOGLE_API_KEY\"]\nmodel = \"gemini-1.5-flash-latest\"\nprompt = \"What is this image?\"\nimage_path = \"test/example.jpg\"\nresponse = generate_content(secret_key, model, prompt, image_path)\nprintln(response.text)","category":"page"},{"location":"","page":"Home","title":"Home","text":"outputs","category":"page"},{"location":"","page":"Home","title":"Home","text":"\"The logo for the Julia programming language.\"","category":"page"},{"location":"#Multi-turn-conversations","page":"Home","title":"Multi-turn conversations","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using GoogleGenAI\n\nprovider = GoogleProvider(api_key=ENV[\"GOOGLE_API_KEY\"])\napi_kwargs = (max_output_tokens=50,)\nmodel = \"gemini-1.5-flash-latest\"\nconversation = [\n    Dict(:role => \"user\", :parts => [Dict(:text => \"When was Julia 1.0 released?\")])\n]\n\nresponse = generate_content(provider, model, conversation)\npush!(conversation, Dict(:role => \"model\", :parts => [Dict(:text => response.text)]))\nprintln(\"Model: \", response.text) \n\npush!(conversation, Dict(:role => \"user\", :parts => [Dict(:text => \"Who created the language?\")]))\nresponse = generate_content(provider, model, conversation; api_kwargs)\nprintln(\"Model: \", response.text)","category":"page"},{"location":"","page":"Home","title":"Home","text":"outputs","category":"page"},{"location":"","page":"Home","title":"Home","text":"\"Model: Julia 1.0 was released on **August 8, 2018**.\"\n\n\"Model: Julia was created by a team of developers at MIT, led by **Jeff Bezanson, Stefan Karpinski, Viral B. Shah, and Alan Edelman**.\"","category":"page"},{"location":"#Count-Tokens","page":"Home","title":"Count Tokens","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using GoogleGenAI\nmodel = \"gemini-1.5-flash-latest\"\nn_tokens = count_tokens(ENV[\"GOOGLE_API_KEY\"], model, \"The Julia programming language\")\nprintln(n_tokens)","category":"page"},{"location":"","page":"Home","title":"Home","text":"outputs","category":"page"},{"location":"","page":"Home","title":"Home","text":"4","category":"page"},{"location":"#Create-Embeddings","page":"Home","title":"Create Embeddings","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using GoogleGenAI\nembeddings = embed_content(ENV[\"GOOGLE_API_KEY\"], \"embedding-001\", \"Hello\")\nprintln(size(embeddings.values))","category":"page"},{"location":"","page":"Home","title":"Home","text":"outputs","category":"page"},{"location":"","page":"Home","title":"Home","text":"(768,)","category":"page"},{"location":"","page":"Home","title":"Home","text":"using GoogleGenAI\nembeddings = embed_content(ENV[\"GOOGLE_API_KEY\"], \"embedding-001\", [\"Hello\", \"world\"])\nprintln(embeddings.response_status)\nprintln(size(embeddings.values[1]))\nprintln(size(embeddings.values[2]))","category":"page"},{"location":"","page":"Home","title":"Home","text":"outputs","category":"page"},{"location":"","page":"Home","title":"Home","text":"200\n(768,)\n(768,)","category":"page"},{"location":"#List-Models","page":"Home","title":"List Models","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using GoogleGenAI\nmodels = list_models(ENV[\"GOOGLE_API_KEY\"])\nfor m in models\n    if \"generateContent\" in m[:supported_generation_methods]\n        println(m[:name])\n    end\nend","category":"page"},{"location":"","page":"Home","title":"Home","text":"outputs","category":"page"},{"location":"","page":"Home","title":"Home","text":"gemini-1.0-pro-latest\ngemini-1.0-pro\ngemini-pro\ngemini-1.0-pro-001\ngemini-1.5-pro-latest\ngemini-1.5-pro-001\ngemini-1.5-pro\ngemini-1.5-pro-exp-0801\ngemini-1.5-pro-exp-0827\ngemini-1.5-flash-latest\ngemini-1.5-flash-001\ngemini-1.5-flash-001-tuning\ngemini-1.5-flash\ngemini-1.5-flash-exp-0827\ngemini-1.5-flash-8b-exp-0827","category":"page"},{"location":"#Safety-Settings","page":"Home","title":"Safety Settings","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"More information about the safety settings can be found here.","category":"page"},{"location":"","page":"Home","title":"Home","text":"using GoogleGenAI\nsecret_key = ENV[\"GOOGLE_API_KEY\"]\nsafety_settings = [\n    Dict(\"category\" => \"HARM_CATEGORY_HATE_SPEECH\", \"threshold\" => \"HARM_BLOCK_THRESHOLD_UNSPECIFIED\"),\n    Dict(\"category\" => \"HARM_CATEGORY_SEXUALLY_EXPLICIT\", \"threshold\" => \"BLOCK_ONLY_HIGH\"),\n    Dict(\"category\" => \"HARM_CATEGORY_HARASSMENT\", \"threshold\" => \"BLOCK_MEDIUM_AND_ABOVE\"),\n    Dict(\"category\" => \"HARM_CATEGORY_DANGEROUS_CONTENT\", \"threshold\" => \"BLOCK_LOW_AND_ABOVE\")\n]\nmodel = \"gemini-1.5-flash-latest\"\nprompt = \"Hello\"\napi_kwargs = (safety_settings=safety_settings,)\nresponse = generate_content(secret_key, model, prompt; api_kwargs)","category":"page"}]
}
